diff --git a/CppCoverage/CodeCoverageRunner.cpp b/CppCoverage/CodeCoverageRunner.cpp
index d724791..b3b0b2e 100644
--- a/CppCoverage/CodeCoverageRunner.cpp
+++ b/CppCoverage/CodeCoverageRunner.cpp
@@ -158,7 +158,7 @@ namespace CppCoverage
 		
 		if (coverageFilter_->IsModuleSelected(filename))
 		{
-			executedAddressManager_->AddModule(hProcess, filename);
+			executedAddressManager_->SetCurrentModule(filename);			
 			auto it = debugInformation_.find(hProcess);
 
 			if (it == debugInformation_.end())
diff --git a/CppCoverage/CoverageData.cpp b/CppCoverage/CoverageData.cpp
index 747ecc0..d856660 100644
--- a/CppCoverage/CoverageData.cpp
+++ b/CppCoverage/CoverageData.cpp
@@ -36,19 +36,9 @@ namespace CppCoverage
 	//-------------------------------------------------------------------------
 	CoverageData::CoverageData(CoverageData&& coverageData)
 	{
-		*this = std::move(coverageData);
-	}
-
-	//-------------------------------------------------------------------------
-	CoverageData& CoverageData::operator=(CoverageData&& coverageData)
-	{
-		if (this != &coverageData)
-		{
-			std::swap(modules_, coverageData.modules_);
-			name_ = coverageData.name_;
-			exitCode_ = coverageData.exitCode_;
-		}
-		return *this;
+		std::swap(modules_, coverageData.modules_);		
+		name_ = coverageData.name_;
+		exitCode_ = coverageData.exitCode_;		
 	}
 
 	//-------------------------------------------------------------------------
@@ -60,18 +50,6 @@ namespace CppCoverage
 	}
 
 	//-------------------------------------------------------------------------	
-	void CoverageData::SetName(const std::wstring& name)
-	{
-		name_ = name;
-	}
-
-	//-------------------------------------------------------------------------
-	void CoverageData::SetExitCode(int exitCode)
-	{
-		exitCode_ = exitCode;
-	}
-
-	//-------------------------------------------------------------------------
 	const CoverageData::T_ModuleCoverageCollection& CoverageData::GetModules() const
 	{
 		return modules_;
diff --git a/CppCoverage/CoverageData.hpp b/CppCoverage/CoverageData.hpp
index 941d7de..6c2bd0e 100644
--- a/CppCoverage/CoverageData.hpp
+++ b/CppCoverage/CoverageData.hpp
@@ -44,14 +44,12 @@ namespace CppCoverage
 		~CoverageData();
 
 		CoverageData(CoverageData&&);			
-		CoverageData& operator=(CoverageData&&);
+
 		ModuleCoverage& AddModule(const boost::filesystem::path& name);
 		
-		void SetName(const std::wstring&);
-		void SetExitCode(int);
-
 		const T_ModuleCoverageCollection& GetModules() const;
 		const std::wstring& GetName() const;
+
 		int GetExitCode() const;
 
 	private:
diff --git a/CppCoverage/ExecutedAddressManager.cpp b/CppCoverage/ExecutedAddressManager.cpp
index f910d9c..2e24950 100644
--- a/CppCoverage/ExecutedAddressManager.cpp
+++ b/CppCoverage/ExecutedAddressManager.cpp
@@ -26,7 +26,6 @@
 #include "ModuleCoverage.hpp"
 #include "FileCoverage.hpp"
 #include "Address.hpp"
-#include "CoverageDataMerger.hpp"
 
 namespace CppCoverage
 {
@@ -82,7 +81,6 @@ namespace CppCoverage
 	
 	//-------------------------------------------------------------------------
 	ExecutedAddressManager::ExecutedAddressManager()
-		: coverageData_{L"", 0}
 	{
 	}
 	
@@ -92,9 +90,9 @@ namespace CppCoverage
 	}
 
 	//-------------------------------------------------------------------------
-	void ExecutedAddressManager::AddModule(HANDLE hProcess, const std::wstring& moduleName)
+	void ExecutedAddressManager::SetCurrentModule(const std::wstring& moduleName)
 	{
-		modulesByHandle_[hProcess].push_back(std::make_unique<Module>(moduleName));
+		modules_.push_back(std::unique_ptr<Module>(new Module(moduleName)));
 	}
 	
 	//-------------------------------------------------------------------------
@@ -104,7 +102,7 @@ namespace CppCoverage
 		unsigned int lineNumber, 
 		unsigned char instructionValue)
 	{
-		auto& module = GetLastAddedModule(address.GetProcessHandle());
+		auto& module = GetCurrentModule();
 		auto& file = module.files_[filename];
 		auto& lines = file.lines;
 		auto& line = lines[lineNumber];
@@ -129,18 +127,11 @@ namespace CppCoverage
 	}
 
 	//-------------------------------------------------------------------------
-	ExecutedAddressManager::Module& ExecutedAddressManager::GetLastAddedModule(HANDLE hProcess)
+	ExecutedAddressManager::Module& ExecutedAddressManager::GetCurrentModule()
 	{
-		auto it = modulesByHandle_.find(hProcess);
-
-		if (it == modulesByHandle_.end())
-			THROW("Cannot get last added module (hProcess).");
-		const auto& modules = it->second;
-
-		if (modules.empty())
-			THROW("Cannot get last added module (no module).");
-
-		return *modules.back();
+		if (modules_.empty())
+			THROW("Not current module set");
+		return *modules_.back();
 	}
 
 	//-------------------------------------------------------------------------
@@ -160,12 +151,15 @@ namespace CppCoverage
 	}
 	
 	//-------------------------------------------------------------------------
-	CoverageData ExecutedAddressManager::CreateCoverageData(const T_Modules& modules) const
+	CoverageData ExecutedAddressManager::CreateCoverageData(
+		const std::wstring& name,
+		int exitCode) const
 	{
-		CoverageData coverageData{ L"", 0 };
-
-		for (const auto& module : modules)
+		CoverageData coverageData{ name, exitCode };
+		
+		for (const auto& module : modules_)
 		{
+			LOG_INFO << L"Create coverage report for " << module->name_;
 			auto& moduleCoverage = coverageData.AddModule(module->name_);
 
 			for (const auto& file : module->files_)
@@ -189,28 +183,8 @@ namespace CppCoverage
 	}
 
 	//-------------------------------------------------------------------------
-	void ExecutedAddressManager::AddModulesToCoverageData(HANDLE hProcess)
-	{
-		auto it = modulesByHandle_.find(hProcess);
-
-		if (it != modulesByHandle_.end())
-		{
-			CoverageDataMerger coverageDataMerger;
-
-			auto processCoverageData = CreateCoverageData(it->second);
-			modulesByHandle_.erase(it);
-			std::vector<CoverageData> coverageDatas;
-			coverageDatas.push_back(std::move(coverageData_));
-			coverageDatas.push_back(std::move(processCoverageData));
-			coverageData_ = coverageDataMerger.Merge(coverageDatas);
-		}
-	}
-
-	//-------------------------------------------------------------------------
 	void ExecutedAddressManager::OnExitProcess(HANDLE hProcess)
 	{
-		AddModulesToCoverageData(hProcess);
-
 		auto it = addressLineMap_.begin();
 
 		while (it != addressLineMap_.end())
@@ -223,15 +197,4 @@ namespace CppCoverage
 				++it;
 		}
 	}
-
-	//-------------------------------------------------------------------------
-	CoverageData ExecutedAddressManager::CreateCoverageData(
-		const std::wstring& name,
-		int exitCode)
-	{
-		coverageData_.SetName(name);
-		coverageData_.SetExitCode(exitCode);
-
-		return std::move(coverageData_);
-	}
 }
diff --git a/CppCoverage/ExecutedAddressManager.hpp b/CppCoverage/ExecutedAddressManager.hpp
index a318b33..81a9a10 100644
--- a/CppCoverage/ExecutedAddressManager.hpp
+++ b/CppCoverage/ExecutedAddressManager.hpp
@@ -18,7 +18,6 @@
 
 #include <string>
 #include <vector>
-#include <unordered_map>
 
 #include <Windows.h>
 #include <memory>
@@ -39,7 +38,7 @@ namespace CppCoverage
 		ExecutedAddressManager();
 		~ExecutedAddressManager();
 
-		void AddModule(HANDLE hProcess, const std::wstring& moduleName);
+		void SetCurrentModule(const std::wstring& moduleName);
 		bool RegisterAddress(
 			const Address&,
 			const std::wstring& filename,
@@ -48,7 +47,8 @@ namespace CppCoverage
 
 		std::optional<unsigned char> MarkAddressAsExecuted(const Address&);
 
-		CoverageData CreateCoverageData(const std::wstring& name, int exitCode);
+		CoverageData CreateCoverageData(const std::wstring& name, int exitCode) const;
+
 		void OnExitProcess(HANDLE hProcess);
 
 	private:
@@ -62,17 +62,11 @@ namespace CppCoverage
 		ExecutedAddressManager(const ExecutedAddressManager&) = delete;
 		ExecutedAddressManager& operator=(const ExecutedAddressManager&) = delete;
 
-		using T_Modules = std::vector<std::unique_ptr<Module>>;
-
-		Module& GetLastAddedModule(HANDLE hProcess);
+		Module& GetCurrentModule();
 		void AddFileCoverageInfo(const File& fileData, FileCoverage& fileCoverage) const;
-		void AddModulesToCoverageData(HANDLE hProcess);
-		CoverageData CreateCoverageData(const T_Modules&) const;
-
+	
 	private:
-		std::unordered_map<HANDLE, T_Modules> modulesByHandle_;
-
-		CoverageData coverageData_;
+		std::vector<std::unique_ptr<Module>> modules_;
 		std::map<Address, std::shared_ptr<Instruction>> addressLineMap_;
 	};
 }
diff --git a/CppCoverageTest/CodeCoverageRunnerTest.cpp b/CppCoverageTest/CodeCoverageRunnerTest.cpp
index b0f6f56..e4be8e7 100644
--- a/CppCoverageTest/CodeCoverageRunnerTest.cpp
+++ b/CppCoverageTest/CodeCoverageRunnerTest.cpp
@@ -142,11 +142,9 @@ namespace CppCoverageTest
 			arguments.insert(arguments.begin(), TestCoverageConsole::TestChildProcess);
 			auto coverageDataChildProcess = ComputeCoverageData(arguments, modulePattern, sourcePattern);
 
-			if (!TestHelper::CoverageDataComparer().IsFirstCollectionContainsSecond(
-					coverageDataChildProcess.GetModules(), coverageData.GetModules()))
-			{
-				throw std::runtime_error("Invalid coverage");
-			}
+			TestHelper::CoverageDataComparer().AssertEquals(
+				coverageData.GetModules().at(0).get(),
+				coverageDataChildProcess.GetModules().at(1).get());
 			return coverageData;
 		}
 
@@ -268,13 +266,7 @@ namespace CppCoverageTest
 		auto rootAndChildProcess = ComputeCoverageData(arguments, modulePattern, sourcePattern, true);
 		auto rootProcessOnly = ComputeCoverageData(arguments, modulePattern, sourcePattern, false);
 
-		const auto& rootOnlyModules = rootProcessOnly.GetModules();
-		const auto& rootAndChildModules = rootAndChildProcess.GetModules();
-
-		ASSERT_TRUE(TestHelper::CoverageDataComparer().IsFirstCollectionContainsSecond(
-			rootAndChildModules, rootOnlyModules));
-		ASSERT_FALSE(TestHelper::CoverageDataComparer().IsFirstCollectionContainsSecond(
-			rootOnlyModules, rootAndChildModules));
+		ASSERT_GT(rootAndChildProcess.GetModules().size(), rootProcessOnly.GetModules().size());
 	}
 
 	//-------------------------------------------------------------------------
diff --git a/CppCoverageTest/ExecutedAddressManagerTest.cpp b/CppCoverageTest/ExecutedAddressManagerTest.cpp
index 40565ce..7da8314 100644
--- a/CppCoverageTest/ExecutedAddressManagerTest.cpp
+++ b/CppCoverageTest/ExecutedAddressManagerTest.cpp
@@ -45,7 +45,7 @@ namespace CppCoverageTest
 
 		ASSERT_THROW(manager.RegisterAddress(address, L"", 0, 0), cov::CppCoverageException);
 
-		manager.AddModule(nullptr, L"");
+		manager.SetCurrentModule(L"");
 		manager.RegisterAddress(address, L"", 0, 0);
 	}
 
@@ -55,7 +55,7 @@ namespace CppCoverageTest
 		cov::ExecutedAddressManager manager;
 		cov::Address address = CreateAddress(0);
 
-		manager.AddModule(nullptr, L"");
+		manager.SetCurrentModule(L"");
 
 		ASSERT_EQ(std::nullopt, manager.MarkAddressAsExecuted(address));
 
@@ -74,12 +74,11 @@ namespace CppCoverageTest
 		const char instructionLine43 = 11;
 		cov::Address address1 = CreateAddress(1);
 		cov::Address address2 = CreateAddress(2); 
-		HANDLE hProcess = nullptr;
-		manager.AddModule(hProcess, moduleName);
+
+		manager.SetCurrentModule(moduleName);
 		manager.RegisterAddress(address1, filename, 42, instructionLine42);
 		manager.RegisterAddress(address2, filename, 43, instructionLine43);
 		manager.MarkAddressAsExecuted(address2);
-		manager.OnExitProcess(hProcess);
 
 		const cov::CoverageData coverageData = manager.CreateCoverageData(L"", 0);
 		
diff --git a/TestHelper/Container.hpp b/TestHelper/Container.hpp
index 80ac54f..4d54d8f 100644
--- a/TestHelper/Container.hpp
+++ b/TestHelper/Container.hpp
@@ -29,13 +29,6 @@ namespace TestHelper
 		const Container& container1,
 		const Container& container2,
 		const CompareFct& compareFct);
-
-	template<typename Key, typename Container, typename CompareFct>
-	bool IsFirstContainsSecond(
-		const Container& container1,
-		const Container& container2,
-		const std::function<Key(const typename Container::value_type&)>& getKeyFct,
-		const CompareFct& compareFct);
 }
 
 #include "Container.inl"
\ No newline at end of file
diff --git a/TestHelper/Container.inl b/TestHelper/Container.inl
index 99f35ce..e3d1f29 100644
--- a/TestHelper/Container.inl
+++ b/TestHelper/Container.inl
@@ -52,28 +52,4 @@ namespace TestHelper
 			compareFct(*value1, *value2);
 		});
 	}
-
-	//---------------------------------------------------------------------
-	template<typename Key, typename Container, typename CompareFct>
-	bool IsFirstContainsSecond(
-		const Container& container1,
-		const Container& container2,
-		const std::function<Key (const typename Container::value_type&)>& getKeyFct,
-		const CompareFct& compareFct)
-	{
-		std::map<Key, typename const Container::value_type*> container1ByKey;
-
-		for (const auto& object : container1)
-			container1ByKey.emplace(getKeyFct(object), &object);
-		for (const auto& object : container2)
-		{
-			auto it = container1ByKey.find(getKeyFct(object));
-
-			if (it == container1ByKey.end())
-				return false;
-
-			return compareFct(*it->second, object);
-		}
-		return true;
-	}
 }
\ No newline at end of file
diff --git a/TestHelper/CoverageDataComparer.cpp b/TestHelper/CoverageDataComparer.cpp
index ca3f63f..be0b6fd 100644
--- a/TestHelper/CoverageDataComparer.cpp
+++ b/TestHelper/CoverageDataComparer.cpp
@@ -90,47 +90,4 @@ namespace TestHelper
 			throw std::runtime_error("Module is null.");
 		AssertModulesEquals(*module1, *module2);
 	}
-
-	using FileCoveragePtr = std::unique_ptr<cov::FileCoverage>;
-
-	//---------------------------------------------------------------------
-	bool CoverageDataComparer::IsFirstModuleContainsSecond(
-		const ModuleCoveragePtr& module1,
-		const ModuleCoveragePtr& module2) const
-	{
-		if (module1->GetPath() != module2->GetPath())
-			return false;
-
-		return IsFirstContainsSecond<boost::filesystem::path>(
-			module1->GetFiles(), module2->GetFiles(),
-			[](const FileCoveragePtr& file) { return file->GetPath(); },
-			[](const FileCoveragePtr& file1, const FileCoveragePtr& file2)
-		{
-			if (file1->GetPath() != file2->GetPath())
-				return false;
-
-			return IsFirstContainsSecond<unsigned int>(
-				file1->GetLines(), file2->GetLines(),
-				[](const cov::LineCoverage& line) { return line.GetLineNumber(); },
-				[](const cov::LineCoverage& line1, const cov::LineCoverage& line2)
-			{
-				return !line2.HasBeenExecuted() || line1.HasBeenExecuted();
-			});
-		});
-	}
-
-	//---------------------------------------------------------------------
-	bool CoverageDataComparer::IsFirstCollectionContainsSecond(
-		const ModuleCoverageCollection& container1,
-		const ModuleCoverageCollection& container2) const
-	{
-		return IsFirstContainsSecond<boost::filesystem::path>(
-			container1, container2,
-			[](const ModuleCoveragePtr& module) { return module->GetPath(); },
-			[=](const ModuleCoveragePtr& module1,
-			   const ModuleCoveragePtr& module2)
-		{
-			return IsFirstModuleContainsSecond(module1, module2);
-		});
-	}
 }
diff --git a/TestHelper/CoverageDataComparer.hpp b/TestHelper/CoverageDataComparer.hpp
index 5739fc1..66a9a83 100644
--- a/TestHelper/CoverageDataComparer.hpp
+++ b/TestHelper/CoverageDataComparer.hpp
@@ -17,7 +17,6 @@
 #pragma once
 
 #include "TestHelperExport.hpp"
-#include <memory>
 
 namespace CppCoverage
 {
@@ -35,16 +34,6 @@ namespace TestHelper
 		void AssertEquals(const CppCoverage::CoverageData&, const CppCoverage::CoverageData&) const;
 		void AssertEquals(const CppCoverage::ModuleCoverage*, const CppCoverage::ModuleCoverage*) const;
 
-		using ModuleCoveragePtr = std::unique_ptr<CppCoverage::ModuleCoverage>;
-		using ModuleCoverageCollection = std::vector<ModuleCoveragePtr>;
-
-		bool IsFirstModuleContainsSecond(
-			const ModuleCoveragePtr& module1,
-			const ModuleCoveragePtr& module2) const;
-
-		bool IsFirstCollectionContainsSecond(
-			const ModuleCoverageCollection& container1,
-			const ModuleCoverageCollection& container2) const;
 	private:
 		CoverageDataComparer(const CoverageDataComparer&) = delete;
 		CoverageDataComparer& operator=(const CoverageDataComparer&) = delete;
